/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.DBConnection;
import Model.DBSearch;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nadeesha
 */
public class CheckAvailability extends javax.swing.JFrame {

    /**
     * Creates new form CheckAvailability
     */
    Vector v = new Vector();
    Object listOrder = new Object();
    int requireV[] = new int[10];
    int availableV[] = new int[10];
    String MatId[] = new String[10];
    int L = 0;
    Statement stmt;
    
    public CheckAvailability() {
        initComponents();
        
        SearchOrder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        OrderIdCMB = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        AvailabilityBTN = new javax.swing.JButton();
        ConfirmBTN = new javax.swing.JButton();
        RequiredBTN = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(51, 255, 0)));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Adobe Caslon Pro", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("Check Stock Availability");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(160, 30, 520, 60);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Order ID :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(50, 120, 120, 28);

        OrderIdCMB.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jPanel1.add(OrderIdCMB);
        OrderIdCMB.setBounds(180, 120, 160, 30);

        jTable2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Component", "Material", "Qty"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(60, 290, 410, 160);

        jTable3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Component", "Material", "Qty"
            }
        ));
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setHeaderValue("Component");
        }

        jPanel1.add(jScrollPane3);
        jScrollPane3.setBounds(60, 590, 400, 150);

        AvailabilityBTN.setBackground(new java.awt.Color(255, 153, 255));
        AvailabilityBTN.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        AvailabilityBTN.setText("Availability");
        AvailabilityBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AvailabilityBTNActionPerformed(evt);
            }
        });
        jPanel1.add(AvailabilityBTN);
        AvailabilityBTN.setBounds(70, 500, 149, 37);

        ConfirmBTN.setBackground(new java.awt.Color(255, 153, 255));
        ConfirmBTN.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        ConfirmBTN.setText("Confirm Availability");
        ConfirmBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmBTNActionPerformed(evt);
            }
        });
        jPanel1.add(ConfirmBTN);
        ConfirmBTN.setBounds(580, 510, 237, 37);

        RequiredBTN.setBackground(new java.awt.Color(255, 153, 255));
        RequiredBTN.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        RequiredBTN.setText("Required");
        RequiredBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequiredBTNActionPerformed(evt);
            }
        });
        jPanel1.add(RequiredBTN);
        RequiredBTN.setBounds(70, 220, 160, 37);

        jButton1.setBackground(new java.awt.Color(255, 153, 255));
        jButton1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(660, 640, 90, 37);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/IMG-20190821-WA0057.jpg"))); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(60, 220, 720, 500);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RequiredBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequiredBTNActionPerformed
        // TODO add your handling code here:
        
         try {
            ResultSet rs = new DBSearch().SearchMid("SELECT Qty,Icode from OrderTransaction where OrderNo ='"+OrderIdCMB.getSelectedItem()+"'");
            DefaultTableModel dtm = (DefaultTableModel)jTable2.getModel();
            dtm.setRowCount(0);
           
           while(rs.next())
           {
              String Qty=rs.getString("Qty");
              
              String Icode=rs.getString("Icode");
               int len = 0;
          
            ResultSet rs1 = new DBSearch().SearchItem("SELECT MatId, Qty from Bomtrans Where Icode = '"+Icode+"'");
           
            while(rs1.next())
              {
                String Mid=rs1.getString("MatId");
                String QtyM=rs1.getString("Qty");
                
        
            ResultSet rs2 = new DBSearch().SearchItem("SELECT ComId from Material where MatId = '"+Mid+"'");
             while(rs2.next())
              {
                Vector v;
                String Cid=rs2.getString("ComId");
               
               int p=Integer.parseInt(Qty);
               int q=Integer.parseInt(QtyM);
               int rQty = q * p;
               
               
               v = new Vector();
               v.add(Cid);
               v.add(Mid);
               v.add(rQty);
              
               requireV[len]= rQty;
               MatId[len] = Mid;
               len++;
               dtm.addRow(v);
              
              }
           } 

           }
        } catch (Exception ex) {
             Logger.getLogger(ItemCosting.class.getName()).log(Level.SEVERE, null, ex);
        }                                                 
    }//GEN-LAST:event_RequiredBTNActionPerformed

    private void AvailabilityBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AvailabilityBTNActionPerformed
        // TODO add your handling code here:
        try {
            ResultSet rs1 = new DBSearch().SearchItem("SELECT Qty, Icode from OrderTransaction Where OrderNo = '"+OrderIdCMB.getSelectedItem()+"'");
            //ResultSet rs = new DBSearch().SearchMid("SELECT Qty from OrderTransaction where Oid ='"+OidCmb.getSelectedItem()+"' AND Icode = '"+IcodeCmb.getSelectedItem()+"'");
            DefaultTableModel dtm = (DefaultTableModel)jTable3.getModel();
            dtm.setRowCount(0);
            
            while(rs1.next())
              {
                String Icode=rs1.getString("Icode");
                int len = 0;
        
            ResultSet rs2 = new DBSearch().SearchItem("SELECT MatId from Bomtrans where Icode = '"+Icode+"'");
             while(rs2.next())
              {
                  String Mid=rs2.getString("MatId");
                ResultSet rs = new DBSearch().SearchItem("SELECT ComId, SQty from Material where MatId = '"+Mid+"'");
             while(rs.next())
              {
                  Vector v;
          
                  String Cid=rs.getString("ComId"); 
                  String StockQty=rs.getString("SQty");
                
               v = new Vector();
               v.add(Cid);
               v.add(Mid);
               v.add(StockQty);
              
               int q = Integer.parseInt(StockQty);
               availableV[len] = q;
               len++;
               dtm.addRow(v);
              L = dtm.getRowCount();
               
              }
           } 
              }    

        } catch (Exception e) {
              e.printStackTrace();
    } 
    }//GEN-LAST:event_AvailabilityBTNActionPerformed

    private void ConfirmBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmBTNActionPerformed
        // TODO add your handling code here:
       /*  try {
            // TODO add your handling code here:
            ResultSet rs = new DBSearch().SearchItem("SELECT ComId from Component");
            DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            Vector v = null;
            int x=0;
            int len=jTable2.getRowCount();
          
             while(rs.next())
              {
                String Cid=rs.getString("ComId");

            ResultSet rs1 = new DBSearch().SearchItem("SELECT MatId from Material where ComId = '"+Cid+"'");
            while(rs1.next())
              {
                String Mid=rs1.getString("MatId");
         
          v = new Vector();
        while(x<len){
            if(tranval[x]>stkval[x]){
                v.add(Mid);
                v.add("Ok");
            }else{
                v.add(Mid);
                v.add("No");
            }
            dtm.addRow(v);
            x++;
        }
              } 
              }
        } catch (Exception ex) {
             Logger.getLogger(ItemCosting.class.getName()).log(Level.SEVERE, null, ex); 
    }*/
      //JOptionPane.showMessageDialog(null, "Order no " + Oid + "on hold." , JOptionPane.INFORMATION_MESSAGE);
      for(int j=0; j<L; j++) {
          if(availableV[j] < requireV[j]){
              JOptionPane.showMessageDialog(null, "Required stock "+ MatId[j] + " OrderNo" +OrderIdCMB.getSelectedItem());
          }
          else {
              JOptionPane.showMessageDialog(null, "Stock are good for "+ MatId[j] + " OrderNo" +OrderIdCMB.getSelectedItem());
          }
          
          try{
              String OrderNo = OrderIdCMB.getSelectedItem().toString();
              stmt = DBConnection.getStatementConnection();
              stmt.executeUpdate("Insert into AvailableOrder Values('"+OrderNo+"', '"+MatId[j]+"', '"+requireV[j]+"')");
          }
          catch(Exception e){
            e.printStackTrace();
        } 
      }
      
    }                                          

     public void SearchOrder(){
        try{
            ResultSet rs = new DBSearch().SearchOrder("Select OrderNo From OrderPlace");
            while(rs.next()) {
                OrderIdCMB.addItem(rs.getString("OrderNo"));
            }
        }
        catch(Exception e){
            e.printStackTrace();
        } 
    }//GEN-LAST:event_ConfirmBTNActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Reorder.getFrames()[1].dispose();
        new Home().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckAvailability.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckAvailability().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AvailabilityBTN;
    private javax.swing.JButton ConfirmBTN;
    private javax.swing.JComboBox<String> OrderIdCMB;
    private javax.swing.JButton RequiredBTN;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
